# meta developer: @your_username
# scope: hikka_only

import asyncio
import random
import os
from telethon import errors
from .. import loader, utils

@loader.tds
class AutoSpamMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∞–º –∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    strings = {
        "name": "AutoSpam",
        "spam_started": "üöÄ <b>–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω!</b>\nüìÅ –§–∞–π–ª: <code>messages.txt</code>\n‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞: <b>0.5 —Å–µ–∫</b>",
        "spam_stopped": "‚õî <b>–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>",
        "spam_error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>{}</code>",
        "file_not_found": "‚ùå <b>–§–∞–π–ª messages.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª messages.txt –≤ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º",
        "file_empty": "‚ùå <b>–§–∞–π–ª messages.txt –ø—É—Å—Ç!</b>\n–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª",
        "already_running": "‚ö†Ô∏è <b>–°–ø–∞–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .stopspam –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
        "not_running": "‚ùå <b>–°–ø–∞–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω</b>",
        "flood_wait": "üö´ <b>FloodWait!</b> –û–∂–∏–¥–∞–Ω–∏–µ <b>{}</b> —Å–µ–∫—É–Ω–¥...",
    }
    
    def __init__(self):
        self.spam_active = False
        self.file_name = "messages.txt"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    
    def read_messages(self):
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ messages.txt"""
        try:
            if not os.path.exists(self.file_name):
                return None
            
            with open(self.file_name, 'r', encoding='utf-8') as f:
                lines = [line.strip() for line in f.readlines() if line.strip()]
            return lines if lines else []
        except Exception:
            return []
    
    @loader.command()
    async def startspam(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–º –∏–∑ —Ñ–∞–π–ª–∞ messages.txt"""
        
        if self.spam_active:
            await utils.answer(message, self.strings["already_running"])
            return
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        messages = self.read_messages()
        
        if messages is None:
            await utils.answer(message, self.strings["file_not_found"])
            return
        
        if not messages:
            await utils.answer(message, self.strings["file_empty"])
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∞–º
        self.spam_active = True
        await utils.answer(message, self.strings["spam_started"])
        
        try:
            while self.spam_active:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É
                random_message = random.choice(messages)
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.client.send_message(message.chat_id, random_message)
                    
                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    await asyncio.sleep(0.5)
                    
                except errors.FloodWaitError as e:
                    await utils.answer(message, self.strings["flood_wait"].format(e.seconds))
                    await asyncio.sleep(e.seconds)
                    continue
                
                except Exception as e:
                    await utils.answer(message, self.strings["spam_error"].format(str(e)))
                    break
                    
        except Exception as e:
            await utils.answer(message, self.strings["spam_error"].format(str(e)))
        
        finally:
            self.spam_active = False
    
    @loader.command()
    async def stopspam(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º"""
        if self.spam_active:
            self.spam_active = False
            await utils.answer(message, self.strings["spam_stopped"])
        else:
            await utils.answer(message, self.strings["not_running"])
